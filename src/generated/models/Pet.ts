
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Pet` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Pet
 * 
 */
export type PetModel = runtime.Types.Result.DefaultSelection<Prisma.$PetPayload>

export type AggregatePet = {
  _count: PetCountAggregateOutputType | null
  _min: PetMinAggregateOutputType | null
  _max: PetMaxAggregateOutputType | null
}

export type PetMinAggregateOutputType = {
  id: string | null
  name: string | null
  age: string | null
  size: string | null
  org_id: string | null
}

export type PetMaxAggregateOutputType = {
  id: string | null
  name: string | null
  age: string | null
  size: string | null
  org_id: string | null
}

export type PetCountAggregateOutputType = {
  id: number
  name: number
  age: number
  size: number
  org_id: number
  _all: number
}


export type PetMinAggregateInputType = {
  id?: true
  name?: true
  age?: true
  size?: true
  org_id?: true
}

export type PetMaxAggregateInputType = {
  id?: true
  name?: true
  age?: true
  size?: true
  org_id?: true
}

export type PetCountAggregateInputType = {
  id?: true
  name?: true
  age?: true
  size?: true
  org_id?: true
  _all?: true
}

export type PetAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Pet to aggregate.
   */
  where?: Prisma.PetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pets to fetch.
   */
  orderBy?: Prisma.PetOrderByWithRelationInput | Prisma.PetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Pets
  **/
  _count?: true | PetCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PetMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PetMaxAggregateInputType
}

export type GetPetAggregateType<T extends PetAggregateArgs> = {
      [P in keyof T & keyof AggregatePet]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePet[P]>
    : Prisma.GetScalarType<T[P], AggregatePet[P]>
}




export type PetGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PetWhereInput
  orderBy?: Prisma.PetOrderByWithAggregationInput | Prisma.PetOrderByWithAggregationInput[]
  by: Prisma.PetScalarFieldEnum[] | Prisma.PetScalarFieldEnum
  having?: Prisma.PetScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PetCountAggregateInputType | true
  _min?: PetMinAggregateInputType
  _max?: PetMaxAggregateInputType
}

export type PetGroupByOutputType = {
  id: string
  name: string
  age: string
  size: string
  org_id: string
  _count: PetCountAggregateOutputType | null
  _min: PetMinAggregateOutputType | null
  _max: PetMaxAggregateOutputType | null
}

type GetPetGroupByPayload<T extends PetGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PetGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PetGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PetGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PetGroupByOutputType[P]>
      }
    >
  >



export type PetWhereInput = {
  AND?: Prisma.PetWhereInput | Prisma.PetWhereInput[]
  OR?: Prisma.PetWhereInput[]
  NOT?: Prisma.PetWhereInput | Prisma.PetWhereInput[]
  id?: Prisma.UuidFilter<"Pet"> | string
  name?: Prisma.StringFilter<"Pet"> | string
  age?: Prisma.StringFilter<"Pet"> | string
  size?: Prisma.StringFilter<"Pet"> | string
  org_id?: Prisma.UuidFilter<"Pet"> | string
  org?: Prisma.XOR<Prisma.OrgScalarRelationFilter, Prisma.OrgWhereInput>
}

export type PetOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  age?: Prisma.SortOrder
  size?: Prisma.SortOrder
  org_id?: Prisma.SortOrder
  org?: Prisma.OrgOrderByWithRelationInput
}

export type PetWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PetWhereInput | Prisma.PetWhereInput[]
  OR?: Prisma.PetWhereInput[]
  NOT?: Prisma.PetWhereInput | Prisma.PetWhereInput[]
  name?: Prisma.StringFilter<"Pet"> | string
  age?: Prisma.StringFilter<"Pet"> | string
  size?: Prisma.StringFilter<"Pet"> | string
  org_id?: Prisma.UuidFilter<"Pet"> | string
  org?: Prisma.XOR<Prisma.OrgScalarRelationFilter, Prisma.OrgWhereInput>
}, "id">

export type PetOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  age?: Prisma.SortOrder
  size?: Prisma.SortOrder
  org_id?: Prisma.SortOrder
  _count?: Prisma.PetCountOrderByAggregateInput
  _max?: Prisma.PetMaxOrderByAggregateInput
  _min?: Prisma.PetMinOrderByAggregateInput
}

export type PetScalarWhereWithAggregatesInput = {
  AND?: Prisma.PetScalarWhereWithAggregatesInput | Prisma.PetScalarWhereWithAggregatesInput[]
  OR?: Prisma.PetScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PetScalarWhereWithAggregatesInput | Prisma.PetScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Pet"> | string
  name?: Prisma.StringWithAggregatesFilter<"Pet"> | string
  age?: Prisma.StringWithAggregatesFilter<"Pet"> | string
  size?: Prisma.StringWithAggregatesFilter<"Pet"> | string
  org_id?: Prisma.UuidWithAggregatesFilter<"Pet"> | string
}

export type PetCreateInput = {
  id?: string
  name: string
  age: string
  size: string
  org: Prisma.OrgCreateNestedOneWithoutPetsInput
}

export type PetUncheckedCreateInput = {
  id?: string
  name: string
  age: string
  size: string
  org_id: string
}

export type PetUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  age?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.StringFieldUpdateOperationsInput | string
  org?: Prisma.OrgUpdateOneRequiredWithoutPetsNestedInput
}

export type PetUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  age?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.StringFieldUpdateOperationsInput | string
  org_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PetCreateManyInput = {
  id?: string
  name: string
  age: string
  size: string
  org_id: string
}

export type PetUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  age?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PetUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  age?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.StringFieldUpdateOperationsInput | string
  org_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PetListRelationFilter = {
  every?: Prisma.PetWhereInput
  some?: Prisma.PetWhereInput
  none?: Prisma.PetWhereInput
}

export type PetOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PetCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  age?: Prisma.SortOrder
  size?: Prisma.SortOrder
  org_id?: Prisma.SortOrder
}

export type PetMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  age?: Prisma.SortOrder
  size?: Prisma.SortOrder
  org_id?: Prisma.SortOrder
}

export type PetMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  age?: Prisma.SortOrder
  size?: Prisma.SortOrder
  org_id?: Prisma.SortOrder
}

export type PetCreateNestedManyWithoutOrgInput = {
  create?: Prisma.XOR<Prisma.PetCreateWithoutOrgInput, Prisma.PetUncheckedCreateWithoutOrgInput> | Prisma.PetCreateWithoutOrgInput[] | Prisma.PetUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.PetCreateOrConnectWithoutOrgInput | Prisma.PetCreateOrConnectWithoutOrgInput[]
  createMany?: Prisma.PetCreateManyOrgInputEnvelope
  connect?: Prisma.PetWhereUniqueInput | Prisma.PetWhereUniqueInput[]
}

export type PetUncheckedCreateNestedManyWithoutOrgInput = {
  create?: Prisma.XOR<Prisma.PetCreateWithoutOrgInput, Prisma.PetUncheckedCreateWithoutOrgInput> | Prisma.PetCreateWithoutOrgInput[] | Prisma.PetUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.PetCreateOrConnectWithoutOrgInput | Prisma.PetCreateOrConnectWithoutOrgInput[]
  createMany?: Prisma.PetCreateManyOrgInputEnvelope
  connect?: Prisma.PetWhereUniqueInput | Prisma.PetWhereUniqueInput[]
}

export type PetUpdateManyWithoutOrgNestedInput = {
  create?: Prisma.XOR<Prisma.PetCreateWithoutOrgInput, Prisma.PetUncheckedCreateWithoutOrgInput> | Prisma.PetCreateWithoutOrgInput[] | Prisma.PetUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.PetCreateOrConnectWithoutOrgInput | Prisma.PetCreateOrConnectWithoutOrgInput[]
  upsert?: Prisma.PetUpsertWithWhereUniqueWithoutOrgInput | Prisma.PetUpsertWithWhereUniqueWithoutOrgInput[]
  createMany?: Prisma.PetCreateManyOrgInputEnvelope
  set?: Prisma.PetWhereUniqueInput | Prisma.PetWhereUniqueInput[]
  disconnect?: Prisma.PetWhereUniqueInput | Prisma.PetWhereUniqueInput[]
  delete?: Prisma.PetWhereUniqueInput | Prisma.PetWhereUniqueInput[]
  connect?: Prisma.PetWhereUniqueInput | Prisma.PetWhereUniqueInput[]
  update?: Prisma.PetUpdateWithWhereUniqueWithoutOrgInput | Prisma.PetUpdateWithWhereUniqueWithoutOrgInput[]
  updateMany?: Prisma.PetUpdateManyWithWhereWithoutOrgInput | Prisma.PetUpdateManyWithWhereWithoutOrgInput[]
  deleteMany?: Prisma.PetScalarWhereInput | Prisma.PetScalarWhereInput[]
}

export type PetUncheckedUpdateManyWithoutOrgNestedInput = {
  create?: Prisma.XOR<Prisma.PetCreateWithoutOrgInput, Prisma.PetUncheckedCreateWithoutOrgInput> | Prisma.PetCreateWithoutOrgInput[] | Prisma.PetUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.PetCreateOrConnectWithoutOrgInput | Prisma.PetCreateOrConnectWithoutOrgInput[]
  upsert?: Prisma.PetUpsertWithWhereUniqueWithoutOrgInput | Prisma.PetUpsertWithWhereUniqueWithoutOrgInput[]
  createMany?: Prisma.PetCreateManyOrgInputEnvelope
  set?: Prisma.PetWhereUniqueInput | Prisma.PetWhereUniqueInput[]
  disconnect?: Prisma.PetWhereUniqueInput | Prisma.PetWhereUniqueInput[]
  delete?: Prisma.PetWhereUniqueInput | Prisma.PetWhereUniqueInput[]
  connect?: Prisma.PetWhereUniqueInput | Prisma.PetWhereUniqueInput[]
  update?: Prisma.PetUpdateWithWhereUniqueWithoutOrgInput | Prisma.PetUpdateWithWhereUniqueWithoutOrgInput[]
  updateMany?: Prisma.PetUpdateManyWithWhereWithoutOrgInput | Prisma.PetUpdateManyWithWhereWithoutOrgInput[]
  deleteMany?: Prisma.PetScalarWhereInput | Prisma.PetScalarWhereInput[]
}

export type PetCreateWithoutOrgInput = {
  id?: string
  name: string
  age: string
  size: string
}

export type PetUncheckedCreateWithoutOrgInput = {
  id?: string
  name: string
  age: string
  size: string
}

export type PetCreateOrConnectWithoutOrgInput = {
  where: Prisma.PetWhereUniqueInput
  create: Prisma.XOR<Prisma.PetCreateWithoutOrgInput, Prisma.PetUncheckedCreateWithoutOrgInput>
}

export type PetCreateManyOrgInputEnvelope = {
  data: Prisma.PetCreateManyOrgInput | Prisma.PetCreateManyOrgInput[]
  skipDuplicates?: boolean
}

export type PetUpsertWithWhereUniqueWithoutOrgInput = {
  where: Prisma.PetWhereUniqueInput
  update: Prisma.XOR<Prisma.PetUpdateWithoutOrgInput, Prisma.PetUncheckedUpdateWithoutOrgInput>
  create: Prisma.XOR<Prisma.PetCreateWithoutOrgInput, Prisma.PetUncheckedCreateWithoutOrgInput>
}

export type PetUpdateWithWhereUniqueWithoutOrgInput = {
  where: Prisma.PetWhereUniqueInput
  data: Prisma.XOR<Prisma.PetUpdateWithoutOrgInput, Prisma.PetUncheckedUpdateWithoutOrgInput>
}

export type PetUpdateManyWithWhereWithoutOrgInput = {
  where: Prisma.PetScalarWhereInput
  data: Prisma.XOR<Prisma.PetUpdateManyMutationInput, Prisma.PetUncheckedUpdateManyWithoutOrgInput>
}

export type PetScalarWhereInput = {
  AND?: Prisma.PetScalarWhereInput | Prisma.PetScalarWhereInput[]
  OR?: Prisma.PetScalarWhereInput[]
  NOT?: Prisma.PetScalarWhereInput | Prisma.PetScalarWhereInput[]
  id?: Prisma.UuidFilter<"Pet"> | string
  name?: Prisma.StringFilter<"Pet"> | string
  age?: Prisma.StringFilter<"Pet"> | string
  size?: Prisma.StringFilter<"Pet"> | string
  org_id?: Prisma.UuidFilter<"Pet"> | string
}

export type PetCreateManyOrgInput = {
  id?: string
  name: string
  age: string
  size: string
}

export type PetUpdateWithoutOrgInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  age?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PetUncheckedUpdateWithoutOrgInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  age?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PetUncheckedUpdateManyWithoutOrgInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  age?: Prisma.StringFieldUpdateOperationsInput | string
  size?: Prisma.StringFieldUpdateOperationsInput | string
}



export type PetSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  age?: boolean
  size?: boolean
  org_id?: boolean
  org?: boolean | Prisma.OrgDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pet"]>

export type PetSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  age?: boolean
  size?: boolean
  org_id?: boolean
  org?: boolean | Prisma.OrgDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pet"]>

export type PetSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  age?: boolean
  size?: boolean
  org_id?: boolean
  org?: boolean | Prisma.OrgDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pet"]>

export type PetSelectScalar = {
  id?: boolean
  name?: boolean
  age?: boolean
  size?: boolean
  org_id?: boolean
}

export type PetOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "age" | "size" | "org_id", ExtArgs["result"]["pet"]>
export type PetInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  org?: boolean | Prisma.OrgDefaultArgs<ExtArgs>
}
export type PetIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  org?: boolean | Prisma.OrgDefaultArgs<ExtArgs>
}
export type PetIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  org?: boolean | Prisma.OrgDefaultArgs<ExtArgs>
}

export type $PetPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Pet"
  objects: {
    org: Prisma.$OrgPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    age: string
    size: string
    org_id: string
  }, ExtArgs["result"]["pet"]>
  composites: {}
}

export type PetGetPayload<S extends boolean | null | undefined | PetDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PetPayload, S>

export type PetCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PetCountAggregateInputType | true
  }

export interface PetDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pet'], meta: { name: 'Pet' } }
  /**
   * Find zero or one Pet that matches the filter.
   * @param {PetFindUniqueArgs} args - Arguments to find a Pet
   * @example
   * // Get one Pet
   * const pet = await prisma.pet.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PetFindUniqueArgs>(args: Prisma.SelectSubset<T, PetFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PetClient<runtime.Types.Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Pet that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PetFindUniqueOrThrowArgs} args - Arguments to find a Pet
   * @example
   * // Get one Pet
   * const pet = await prisma.pet.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PetFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PetFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PetClient<runtime.Types.Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Pet that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PetFindFirstArgs} args - Arguments to find a Pet
   * @example
   * // Get one Pet
   * const pet = await prisma.pet.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PetFindFirstArgs>(args?: Prisma.SelectSubset<T, PetFindFirstArgs<ExtArgs>>): Prisma.Prisma__PetClient<runtime.Types.Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Pet that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PetFindFirstOrThrowArgs} args - Arguments to find a Pet
   * @example
   * // Get one Pet
   * const pet = await prisma.pet.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PetFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PetFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PetClient<runtime.Types.Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Pets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PetFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Pets
   * const pets = await prisma.pet.findMany()
   * 
   * // Get first 10 Pets
   * const pets = await prisma.pet.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const petWithIdOnly = await prisma.pet.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PetFindManyArgs>(args?: Prisma.SelectSubset<T, PetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Pet.
   * @param {PetCreateArgs} args - Arguments to create a Pet.
   * @example
   * // Create one Pet
   * const Pet = await prisma.pet.create({
   *   data: {
   *     // ... data to create a Pet
   *   }
   * })
   * 
   */
  create<T extends PetCreateArgs>(args: Prisma.SelectSubset<T, PetCreateArgs<ExtArgs>>): Prisma.Prisma__PetClient<runtime.Types.Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Pets.
   * @param {PetCreateManyArgs} args - Arguments to create many Pets.
   * @example
   * // Create many Pets
   * const pet = await prisma.pet.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PetCreateManyArgs>(args?: Prisma.SelectSubset<T, PetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Pets and returns the data saved in the database.
   * @param {PetCreateManyAndReturnArgs} args - Arguments to create many Pets.
   * @example
   * // Create many Pets
   * const pet = await prisma.pet.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Pets and only return the `id`
   * const petWithIdOnly = await prisma.pet.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PetCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Pet.
   * @param {PetDeleteArgs} args - Arguments to delete one Pet.
   * @example
   * // Delete one Pet
   * const Pet = await prisma.pet.delete({
   *   where: {
   *     // ... filter to delete one Pet
   *   }
   * })
   * 
   */
  delete<T extends PetDeleteArgs>(args: Prisma.SelectSubset<T, PetDeleteArgs<ExtArgs>>): Prisma.Prisma__PetClient<runtime.Types.Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Pet.
   * @param {PetUpdateArgs} args - Arguments to update one Pet.
   * @example
   * // Update one Pet
   * const pet = await prisma.pet.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PetUpdateArgs>(args: Prisma.SelectSubset<T, PetUpdateArgs<ExtArgs>>): Prisma.Prisma__PetClient<runtime.Types.Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Pets.
   * @param {PetDeleteManyArgs} args - Arguments to filter Pets to delete.
   * @example
   * // Delete a few Pets
   * const { count } = await prisma.pet.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PetDeleteManyArgs>(args?: Prisma.SelectSubset<T, PetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Pets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Pets
   * const pet = await prisma.pet.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PetUpdateManyArgs>(args: Prisma.SelectSubset<T, PetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Pets and returns the data updated in the database.
   * @param {PetUpdateManyAndReturnArgs} args - Arguments to update many Pets.
   * @example
   * // Update many Pets
   * const pet = await prisma.pet.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Pets and only return the `id`
   * const petWithIdOnly = await prisma.pet.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PetUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Pet.
   * @param {PetUpsertArgs} args - Arguments to update or create a Pet.
   * @example
   * // Update or create a Pet
   * const pet = await prisma.pet.upsert({
   *   create: {
   *     // ... data to create a Pet
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Pet we want to update
   *   }
   * })
   */
  upsert<T extends PetUpsertArgs>(args: Prisma.SelectSubset<T, PetUpsertArgs<ExtArgs>>): Prisma.Prisma__PetClient<runtime.Types.Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Pets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PetCountArgs} args - Arguments to filter Pets to count.
   * @example
   * // Count the number of Pets
   * const count = await prisma.pet.count({
   *   where: {
   *     // ... the filter for the Pets we want to count
   *   }
   * })
  **/
  count<T extends PetCountArgs>(
    args?: Prisma.Subset<T, PetCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PetCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Pet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PetAggregateArgs>(args: Prisma.Subset<T, PetAggregateArgs>): Prisma.PrismaPromise<GetPetAggregateType<T>>

  /**
   * Group by Pet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PetGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PetGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PetGroupByArgs['orderBy'] }
      : { orderBy?: PetGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Pet model
 */
readonly fields: PetFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Pet.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PetClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  org<T extends Prisma.OrgDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrgDefaultArgs<ExtArgs>>): Prisma.Prisma__OrgClient<runtime.Types.Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Pet model
 */
export interface PetFieldRefs {
  readonly id: Prisma.FieldRef<"Pet", 'String'>
  readonly name: Prisma.FieldRef<"Pet", 'String'>
  readonly age: Prisma.FieldRef<"Pet", 'String'>
  readonly size: Prisma.FieldRef<"Pet", 'String'>
  readonly org_id: Prisma.FieldRef<"Pet", 'String'>
}
    

// Custom InputTypes
/**
 * Pet findUnique
 */
export type PetFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pet
   */
  select?: Prisma.PetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pet
   */
  omit?: Prisma.PetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PetInclude<ExtArgs> | null
  /**
   * Filter, which Pet to fetch.
   */
  where: Prisma.PetWhereUniqueInput
}

/**
 * Pet findUniqueOrThrow
 */
export type PetFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pet
   */
  select?: Prisma.PetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pet
   */
  omit?: Prisma.PetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PetInclude<ExtArgs> | null
  /**
   * Filter, which Pet to fetch.
   */
  where: Prisma.PetWhereUniqueInput
}

/**
 * Pet findFirst
 */
export type PetFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pet
   */
  select?: Prisma.PetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pet
   */
  omit?: Prisma.PetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PetInclude<ExtArgs> | null
  /**
   * Filter, which Pet to fetch.
   */
  where?: Prisma.PetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pets to fetch.
   */
  orderBy?: Prisma.PetOrderByWithRelationInput | Prisma.PetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Pets.
   */
  cursor?: Prisma.PetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Pets.
   */
  distinct?: Prisma.PetScalarFieldEnum | Prisma.PetScalarFieldEnum[]
}

/**
 * Pet findFirstOrThrow
 */
export type PetFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pet
   */
  select?: Prisma.PetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pet
   */
  omit?: Prisma.PetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PetInclude<ExtArgs> | null
  /**
   * Filter, which Pet to fetch.
   */
  where?: Prisma.PetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pets to fetch.
   */
  orderBy?: Prisma.PetOrderByWithRelationInput | Prisma.PetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Pets.
   */
  cursor?: Prisma.PetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Pets.
   */
  distinct?: Prisma.PetScalarFieldEnum | Prisma.PetScalarFieldEnum[]
}

/**
 * Pet findMany
 */
export type PetFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pet
   */
  select?: Prisma.PetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pet
   */
  omit?: Prisma.PetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PetInclude<ExtArgs> | null
  /**
   * Filter, which Pets to fetch.
   */
  where?: Prisma.PetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pets to fetch.
   */
  orderBy?: Prisma.PetOrderByWithRelationInput | Prisma.PetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Pets.
   */
  cursor?: Prisma.PetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pets.
   */
  skip?: number
  distinct?: Prisma.PetScalarFieldEnum | Prisma.PetScalarFieldEnum[]
}

/**
 * Pet create
 */
export type PetCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pet
   */
  select?: Prisma.PetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pet
   */
  omit?: Prisma.PetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PetInclude<ExtArgs> | null
  /**
   * The data needed to create a Pet.
   */
  data: Prisma.XOR<Prisma.PetCreateInput, Prisma.PetUncheckedCreateInput>
}

/**
 * Pet createMany
 */
export type PetCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Pets.
   */
  data: Prisma.PetCreateManyInput | Prisma.PetCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Pet createManyAndReturn
 */
export type PetCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pet
   */
  select?: Prisma.PetSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Pet
   */
  omit?: Prisma.PetOmit<ExtArgs> | null
  /**
   * The data used to create many Pets.
   */
  data: Prisma.PetCreateManyInput | Prisma.PetCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PetIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Pet update
 */
export type PetUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pet
   */
  select?: Prisma.PetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pet
   */
  omit?: Prisma.PetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PetInclude<ExtArgs> | null
  /**
   * The data needed to update a Pet.
   */
  data: Prisma.XOR<Prisma.PetUpdateInput, Prisma.PetUncheckedUpdateInput>
  /**
   * Choose, which Pet to update.
   */
  where: Prisma.PetWhereUniqueInput
}

/**
 * Pet updateMany
 */
export type PetUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Pets.
   */
  data: Prisma.XOR<Prisma.PetUpdateManyMutationInput, Prisma.PetUncheckedUpdateManyInput>
  /**
   * Filter which Pets to update
   */
  where?: Prisma.PetWhereInput
  /**
   * Limit how many Pets to update.
   */
  limit?: number
}

/**
 * Pet updateManyAndReturn
 */
export type PetUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pet
   */
  select?: Prisma.PetSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Pet
   */
  omit?: Prisma.PetOmit<ExtArgs> | null
  /**
   * The data used to update Pets.
   */
  data: Prisma.XOR<Prisma.PetUpdateManyMutationInput, Prisma.PetUncheckedUpdateManyInput>
  /**
   * Filter which Pets to update
   */
  where?: Prisma.PetWhereInput
  /**
   * Limit how many Pets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PetIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Pet upsert
 */
export type PetUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pet
   */
  select?: Prisma.PetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pet
   */
  omit?: Prisma.PetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PetInclude<ExtArgs> | null
  /**
   * The filter to search for the Pet to update in case it exists.
   */
  where: Prisma.PetWhereUniqueInput
  /**
   * In case the Pet found by the `where` argument doesn't exist, create a new Pet with this data.
   */
  create: Prisma.XOR<Prisma.PetCreateInput, Prisma.PetUncheckedCreateInput>
  /**
   * In case the Pet was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PetUpdateInput, Prisma.PetUncheckedUpdateInput>
}

/**
 * Pet delete
 */
export type PetDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pet
   */
  select?: Prisma.PetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pet
   */
  omit?: Prisma.PetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PetInclude<ExtArgs> | null
  /**
   * Filter which Pet to delete.
   */
  where: Prisma.PetWhereUniqueInput
}

/**
 * Pet deleteMany
 */
export type PetDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Pets to delete
   */
  where?: Prisma.PetWhereInput
  /**
   * Limit how many Pets to delete.
   */
  limit?: number
}

/**
 * Pet without action
 */
export type PetDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pet
   */
  select?: Prisma.PetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pet
   */
  omit?: Prisma.PetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PetInclude<ExtArgs> | null
}
