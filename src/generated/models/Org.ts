
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Org` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Org
 * 
 */
export type OrgModel = runtime.Types.Result.DefaultSelection<Prisma.$OrgPayload>

export type AggregateOrg = {
  _count: OrgCountAggregateOutputType | null
  _min: OrgMinAggregateOutputType | null
  _max: OrgMaxAggregateOutputType | null
}

export type OrgMinAggregateOutputType = {
  id: string | null
  email: string | null
  password_hash: string | null
  address: string | null
  phone_number: string | null
  city: string | null
  State: string | null
  created_at: Date | null
}

export type OrgMaxAggregateOutputType = {
  id: string | null
  email: string | null
  password_hash: string | null
  address: string | null
  phone_number: string | null
  city: string | null
  State: string | null
  created_at: Date | null
}

export type OrgCountAggregateOutputType = {
  id: number
  email: number
  password_hash: number
  address: number
  phone_number: number
  city: number
  State: number
  created_at: number
  _all: number
}


export type OrgMinAggregateInputType = {
  id?: true
  email?: true
  password_hash?: true
  address?: true
  phone_number?: true
  city?: true
  State?: true
  created_at?: true
}

export type OrgMaxAggregateInputType = {
  id?: true
  email?: true
  password_hash?: true
  address?: true
  phone_number?: true
  city?: true
  State?: true
  created_at?: true
}

export type OrgCountAggregateInputType = {
  id?: true
  email?: true
  password_hash?: true
  address?: true
  phone_number?: true
  city?: true
  State?: true
  created_at?: true
  _all?: true
}

export type OrgAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Org to aggregate.
   */
  where?: Prisma.OrgWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Orgs to fetch.
   */
  orderBy?: Prisma.OrgOrderByWithRelationInput | Prisma.OrgOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OrgWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Orgs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Orgs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Orgs
  **/
  _count?: true | OrgCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OrgMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OrgMaxAggregateInputType
}

export type GetOrgAggregateType<T extends OrgAggregateArgs> = {
      [P in keyof T & keyof AggregateOrg]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOrg[P]>
    : Prisma.GetScalarType<T[P], AggregateOrg[P]>
}




export type OrgGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrgWhereInput
  orderBy?: Prisma.OrgOrderByWithAggregationInput | Prisma.OrgOrderByWithAggregationInput[]
  by: Prisma.OrgScalarFieldEnum[] | Prisma.OrgScalarFieldEnum
  having?: Prisma.OrgScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OrgCountAggregateInputType | true
  _min?: OrgMinAggregateInputType
  _max?: OrgMaxAggregateInputType
}

export type OrgGroupByOutputType = {
  id: string
  email: string
  password_hash: string
  address: string
  phone_number: string
  city: string
  State: string
  created_at: Date
  _count: OrgCountAggregateOutputType | null
  _min: OrgMinAggregateOutputType | null
  _max: OrgMaxAggregateOutputType | null
}

type GetOrgGroupByPayload<T extends OrgGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OrgGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OrgGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OrgGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OrgGroupByOutputType[P]>
      }
    >
  >



export type OrgWhereInput = {
  AND?: Prisma.OrgWhereInput | Prisma.OrgWhereInput[]
  OR?: Prisma.OrgWhereInput[]
  NOT?: Prisma.OrgWhereInput | Prisma.OrgWhereInput[]
  id?: Prisma.UuidFilter<"Org"> | string
  email?: Prisma.StringFilter<"Org"> | string
  password_hash?: Prisma.StringFilter<"Org"> | string
  address?: Prisma.StringFilter<"Org"> | string
  phone_number?: Prisma.StringFilter<"Org"> | string
  city?: Prisma.StringFilter<"Org"> | string
  State?: Prisma.StringFilter<"Org"> | string
  created_at?: Prisma.DateTimeFilter<"Org"> | Date | string
  pets?: Prisma.PetListRelationFilter
}

export type OrgOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone_number?: Prisma.SortOrder
  city?: Prisma.SortOrder
  State?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  pets?: Prisma.PetOrderByRelationAggregateInput
}

export type OrgWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  email?: string
  AND?: Prisma.OrgWhereInput | Prisma.OrgWhereInput[]
  OR?: Prisma.OrgWhereInput[]
  NOT?: Prisma.OrgWhereInput | Prisma.OrgWhereInput[]
  password_hash?: Prisma.StringFilter<"Org"> | string
  address?: Prisma.StringFilter<"Org"> | string
  phone_number?: Prisma.StringFilter<"Org"> | string
  city?: Prisma.StringFilter<"Org"> | string
  State?: Prisma.StringFilter<"Org"> | string
  created_at?: Prisma.DateTimeFilter<"Org"> | Date | string
  pets?: Prisma.PetListRelationFilter
}, "id" | "email">

export type OrgOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone_number?: Prisma.SortOrder
  city?: Prisma.SortOrder
  State?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  _count?: Prisma.OrgCountOrderByAggregateInput
  _max?: Prisma.OrgMaxOrderByAggregateInput
  _min?: Prisma.OrgMinOrderByAggregateInput
}

export type OrgScalarWhereWithAggregatesInput = {
  AND?: Prisma.OrgScalarWhereWithAggregatesInput | Prisma.OrgScalarWhereWithAggregatesInput[]
  OR?: Prisma.OrgScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OrgScalarWhereWithAggregatesInput | Prisma.OrgScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Org"> | string
  email?: Prisma.StringWithAggregatesFilter<"Org"> | string
  password_hash?: Prisma.StringWithAggregatesFilter<"Org"> | string
  address?: Prisma.StringWithAggregatesFilter<"Org"> | string
  phone_number?: Prisma.StringWithAggregatesFilter<"Org"> | string
  city?: Prisma.StringWithAggregatesFilter<"Org"> | string
  State?: Prisma.StringWithAggregatesFilter<"Org"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Org"> | Date | string
}

export type OrgCreateInput = {
  id?: string
  email: string
  password_hash: string
  address: string
  phone_number: string
  city: string
  State: string
  created_at?: Date | string
  pets?: Prisma.PetCreateNestedManyWithoutOrgInput
}

export type OrgUncheckedCreateInput = {
  id?: string
  email: string
  password_hash: string
  address: string
  phone_number: string
  city: string
  State: string
  created_at?: Date | string
  pets?: Prisma.PetUncheckedCreateNestedManyWithoutOrgInput
}

export type OrgUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone_number?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  State?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pets?: Prisma.PetUpdateManyWithoutOrgNestedInput
}

export type OrgUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone_number?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  State?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pets?: Prisma.PetUncheckedUpdateManyWithoutOrgNestedInput
}

export type OrgCreateManyInput = {
  id?: string
  email: string
  password_hash: string
  address: string
  phone_number: string
  city: string
  State: string
  created_at?: Date | string
}

export type OrgUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone_number?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  State?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OrgUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone_number?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  State?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OrgCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone_number?: Prisma.SortOrder
  city?: Prisma.SortOrder
  State?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type OrgMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone_number?: Prisma.SortOrder
  city?: Prisma.SortOrder
  State?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type OrgMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  address?: Prisma.SortOrder
  phone_number?: Prisma.SortOrder
  city?: Prisma.SortOrder
  State?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type OrgScalarRelationFilter = {
  is?: Prisma.OrgWhereInput
  isNot?: Prisma.OrgWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type OrgCreateNestedOneWithoutPetsInput = {
  create?: Prisma.XOR<Prisma.OrgCreateWithoutPetsInput, Prisma.OrgUncheckedCreateWithoutPetsInput>
  connectOrCreate?: Prisma.OrgCreateOrConnectWithoutPetsInput
  connect?: Prisma.OrgWhereUniqueInput
}

export type OrgUpdateOneRequiredWithoutPetsNestedInput = {
  create?: Prisma.XOR<Prisma.OrgCreateWithoutPetsInput, Prisma.OrgUncheckedCreateWithoutPetsInput>
  connectOrCreate?: Prisma.OrgCreateOrConnectWithoutPetsInput
  upsert?: Prisma.OrgUpsertWithoutPetsInput
  connect?: Prisma.OrgWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OrgUpdateToOneWithWhereWithoutPetsInput, Prisma.OrgUpdateWithoutPetsInput>, Prisma.OrgUncheckedUpdateWithoutPetsInput>
}

export type OrgCreateWithoutPetsInput = {
  id?: string
  email: string
  password_hash: string
  address: string
  phone_number: string
  city: string
  State: string
  created_at?: Date | string
}

export type OrgUncheckedCreateWithoutPetsInput = {
  id?: string
  email: string
  password_hash: string
  address: string
  phone_number: string
  city: string
  State: string
  created_at?: Date | string
}

export type OrgCreateOrConnectWithoutPetsInput = {
  where: Prisma.OrgWhereUniqueInput
  create: Prisma.XOR<Prisma.OrgCreateWithoutPetsInput, Prisma.OrgUncheckedCreateWithoutPetsInput>
}

export type OrgUpsertWithoutPetsInput = {
  update: Prisma.XOR<Prisma.OrgUpdateWithoutPetsInput, Prisma.OrgUncheckedUpdateWithoutPetsInput>
  create: Prisma.XOR<Prisma.OrgCreateWithoutPetsInput, Prisma.OrgUncheckedCreateWithoutPetsInput>
  where?: Prisma.OrgWhereInput
}

export type OrgUpdateToOneWithWhereWithoutPetsInput = {
  where?: Prisma.OrgWhereInput
  data: Prisma.XOR<Prisma.OrgUpdateWithoutPetsInput, Prisma.OrgUncheckedUpdateWithoutPetsInput>
}

export type OrgUpdateWithoutPetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone_number?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  State?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OrgUncheckedUpdateWithoutPetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  phone_number?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  State?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type OrgCountOutputType
 */

export type OrgCountOutputType = {
  pets: number
}

export type OrgCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  pets?: boolean | OrgCountOutputTypeCountPetsArgs
}

/**
 * OrgCountOutputType without action
 */
export type OrgCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgCountOutputType
   */
  select?: Prisma.OrgCountOutputTypeSelect<ExtArgs> | null
}

/**
 * OrgCountOutputType without action
 */
export type OrgCountOutputTypeCountPetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PetWhereInput
}


export type OrgSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  password_hash?: boolean
  address?: boolean
  phone_number?: boolean
  city?: boolean
  State?: boolean
  created_at?: boolean
  pets?: boolean | Prisma.Org$petsArgs<ExtArgs>
  _count?: boolean | Prisma.OrgCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["org"]>

export type OrgSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  password_hash?: boolean
  address?: boolean
  phone_number?: boolean
  city?: boolean
  State?: boolean
  created_at?: boolean
}, ExtArgs["result"]["org"]>

export type OrgSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  password_hash?: boolean
  address?: boolean
  phone_number?: boolean
  city?: boolean
  State?: boolean
  created_at?: boolean
}, ExtArgs["result"]["org"]>

export type OrgSelectScalar = {
  id?: boolean
  email?: boolean
  password_hash?: boolean
  address?: boolean
  phone_number?: boolean
  city?: boolean
  State?: boolean
  created_at?: boolean
}

export type OrgOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "email" | "password_hash" | "address" | "phone_number" | "city" | "State" | "created_at", ExtArgs["result"]["org"]>
export type OrgInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  pets?: boolean | Prisma.Org$petsArgs<ExtArgs>
  _count?: boolean | Prisma.OrgCountOutputTypeDefaultArgs<ExtArgs>
}
export type OrgIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type OrgIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $OrgPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Org"
  objects: {
    pets: Prisma.$PetPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    email: string
    password_hash: string
    address: string
    phone_number: string
    city: string
    State: string
    created_at: Date
  }, ExtArgs["result"]["org"]>
  composites: {}
}

export type OrgGetPayload<S extends boolean | null | undefined | OrgDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OrgPayload, S>

export type OrgCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OrgFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OrgCountAggregateInputType | true
  }

export interface OrgDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Org'], meta: { name: 'Org' } }
  /**
   * Find zero or one Org that matches the filter.
   * @param {OrgFindUniqueArgs} args - Arguments to find a Org
   * @example
   * // Get one Org
   * const org = await prisma.org.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OrgFindUniqueArgs>(args: Prisma.SelectSubset<T, OrgFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OrgClient<runtime.Types.Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Org that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OrgFindUniqueOrThrowArgs} args - Arguments to find a Org
   * @example
   * // Get one Org
   * const org = await prisma.org.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OrgFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OrgFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrgClient<runtime.Types.Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Org that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgFindFirstArgs} args - Arguments to find a Org
   * @example
   * // Get one Org
   * const org = await prisma.org.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OrgFindFirstArgs>(args?: Prisma.SelectSubset<T, OrgFindFirstArgs<ExtArgs>>): Prisma.Prisma__OrgClient<runtime.Types.Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Org that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgFindFirstOrThrowArgs} args - Arguments to find a Org
   * @example
   * // Get one Org
   * const org = await prisma.org.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OrgFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OrgFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrgClient<runtime.Types.Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Orgs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Orgs
   * const orgs = await prisma.org.findMany()
   * 
   * // Get first 10 Orgs
   * const orgs = await prisma.org.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const orgWithIdOnly = await prisma.org.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OrgFindManyArgs>(args?: Prisma.SelectSubset<T, OrgFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Org.
   * @param {OrgCreateArgs} args - Arguments to create a Org.
   * @example
   * // Create one Org
   * const Org = await prisma.org.create({
   *   data: {
   *     // ... data to create a Org
   *   }
   * })
   * 
   */
  create<T extends OrgCreateArgs>(args: Prisma.SelectSubset<T, OrgCreateArgs<ExtArgs>>): Prisma.Prisma__OrgClient<runtime.Types.Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Orgs.
   * @param {OrgCreateManyArgs} args - Arguments to create many Orgs.
   * @example
   * // Create many Orgs
   * const org = await prisma.org.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OrgCreateManyArgs>(args?: Prisma.SelectSubset<T, OrgCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Orgs and returns the data saved in the database.
   * @param {OrgCreateManyAndReturnArgs} args - Arguments to create many Orgs.
   * @example
   * // Create many Orgs
   * const org = await prisma.org.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Orgs and only return the `id`
   * const orgWithIdOnly = await prisma.org.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OrgCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OrgCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Org.
   * @param {OrgDeleteArgs} args - Arguments to delete one Org.
   * @example
   * // Delete one Org
   * const Org = await prisma.org.delete({
   *   where: {
   *     // ... filter to delete one Org
   *   }
   * })
   * 
   */
  delete<T extends OrgDeleteArgs>(args: Prisma.SelectSubset<T, OrgDeleteArgs<ExtArgs>>): Prisma.Prisma__OrgClient<runtime.Types.Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Org.
   * @param {OrgUpdateArgs} args - Arguments to update one Org.
   * @example
   * // Update one Org
   * const org = await prisma.org.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OrgUpdateArgs>(args: Prisma.SelectSubset<T, OrgUpdateArgs<ExtArgs>>): Prisma.Prisma__OrgClient<runtime.Types.Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Orgs.
   * @param {OrgDeleteManyArgs} args - Arguments to filter Orgs to delete.
   * @example
   * // Delete a few Orgs
   * const { count } = await prisma.org.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OrgDeleteManyArgs>(args?: Prisma.SelectSubset<T, OrgDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Orgs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Orgs
   * const org = await prisma.org.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OrgUpdateManyArgs>(args: Prisma.SelectSubset<T, OrgUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Orgs and returns the data updated in the database.
   * @param {OrgUpdateManyAndReturnArgs} args - Arguments to update many Orgs.
   * @example
   * // Update many Orgs
   * const org = await prisma.org.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Orgs and only return the `id`
   * const orgWithIdOnly = await prisma.org.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OrgUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OrgUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Org.
   * @param {OrgUpsertArgs} args - Arguments to update or create a Org.
   * @example
   * // Update or create a Org
   * const org = await prisma.org.upsert({
   *   create: {
   *     // ... data to create a Org
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Org we want to update
   *   }
   * })
   */
  upsert<T extends OrgUpsertArgs>(args: Prisma.SelectSubset<T, OrgUpsertArgs<ExtArgs>>): Prisma.Prisma__OrgClient<runtime.Types.Result.GetResult<Prisma.$OrgPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Orgs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgCountArgs} args - Arguments to filter Orgs to count.
   * @example
   * // Count the number of Orgs
   * const count = await prisma.org.count({
   *   where: {
   *     // ... the filter for the Orgs we want to count
   *   }
   * })
  **/
  count<T extends OrgCountArgs>(
    args?: Prisma.Subset<T, OrgCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OrgCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Org.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OrgAggregateArgs>(args: Prisma.Subset<T, OrgAggregateArgs>): Prisma.PrismaPromise<GetOrgAggregateType<T>>

  /**
   * Group by Org.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OrgGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OrgGroupByArgs['orderBy'] }
      : { orderBy?: OrgGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OrgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Org model
 */
readonly fields: OrgFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Org.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OrgClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  pets<T extends Prisma.Org$petsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Org$petsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Org model
 */
export interface OrgFieldRefs {
  readonly id: Prisma.FieldRef<"Org", 'String'>
  readonly email: Prisma.FieldRef<"Org", 'String'>
  readonly password_hash: Prisma.FieldRef<"Org", 'String'>
  readonly address: Prisma.FieldRef<"Org", 'String'>
  readonly phone_number: Prisma.FieldRef<"Org", 'String'>
  readonly city: Prisma.FieldRef<"Org", 'String'>
  readonly State: Prisma.FieldRef<"Org", 'String'>
  readonly created_at: Prisma.FieldRef<"Org", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Org findUnique
 */
export type OrgFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Org
   */
  select?: Prisma.OrgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Org
   */
  omit?: Prisma.OrgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgInclude<ExtArgs> | null
  /**
   * Filter, which Org to fetch.
   */
  where: Prisma.OrgWhereUniqueInput
}

/**
 * Org findUniqueOrThrow
 */
export type OrgFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Org
   */
  select?: Prisma.OrgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Org
   */
  omit?: Prisma.OrgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgInclude<ExtArgs> | null
  /**
   * Filter, which Org to fetch.
   */
  where: Prisma.OrgWhereUniqueInput
}

/**
 * Org findFirst
 */
export type OrgFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Org
   */
  select?: Prisma.OrgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Org
   */
  omit?: Prisma.OrgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgInclude<ExtArgs> | null
  /**
   * Filter, which Org to fetch.
   */
  where?: Prisma.OrgWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Orgs to fetch.
   */
  orderBy?: Prisma.OrgOrderByWithRelationInput | Prisma.OrgOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Orgs.
   */
  cursor?: Prisma.OrgWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Orgs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Orgs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Orgs.
   */
  distinct?: Prisma.OrgScalarFieldEnum | Prisma.OrgScalarFieldEnum[]
}

/**
 * Org findFirstOrThrow
 */
export type OrgFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Org
   */
  select?: Prisma.OrgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Org
   */
  omit?: Prisma.OrgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgInclude<ExtArgs> | null
  /**
   * Filter, which Org to fetch.
   */
  where?: Prisma.OrgWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Orgs to fetch.
   */
  orderBy?: Prisma.OrgOrderByWithRelationInput | Prisma.OrgOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Orgs.
   */
  cursor?: Prisma.OrgWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Orgs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Orgs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Orgs.
   */
  distinct?: Prisma.OrgScalarFieldEnum | Prisma.OrgScalarFieldEnum[]
}

/**
 * Org findMany
 */
export type OrgFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Org
   */
  select?: Prisma.OrgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Org
   */
  omit?: Prisma.OrgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgInclude<ExtArgs> | null
  /**
   * Filter, which Orgs to fetch.
   */
  where?: Prisma.OrgWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Orgs to fetch.
   */
  orderBy?: Prisma.OrgOrderByWithRelationInput | Prisma.OrgOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Orgs.
   */
  cursor?: Prisma.OrgWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Orgs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Orgs.
   */
  skip?: number
  distinct?: Prisma.OrgScalarFieldEnum | Prisma.OrgScalarFieldEnum[]
}

/**
 * Org create
 */
export type OrgCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Org
   */
  select?: Prisma.OrgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Org
   */
  omit?: Prisma.OrgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgInclude<ExtArgs> | null
  /**
   * The data needed to create a Org.
   */
  data: Prisma.XOR<Prisma.OrgCreateInput, Prisma.OrgUncheckedCreateInput>
}

/**
 * Org createMany
 */
export type OrgCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Orgs.
   */
  data: Prisma.OrgCreateManyInput | Prisma.OrgCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Org createManyAndReturn
 */
export type OrgCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Org
   */
  select?: Prisma.OrgSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Org
   */
  omit?: Prisma.OrgOmit<ExtArgs> | null
  /**
   * The data used to create many Orgs.
   */
  data: Prisma.OrgCreateManyInput | Prisma.OrgCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Org update
 */
export type OrgUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Org
   */
  select?: Prisma.OrgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Org
   */
  omit?: Prisma.OrgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgInclude<ExtArgs> | null
  /**
   * The data needed to update a Org.
   */
  data: Prisma.XOR<Prisma.OrgUpdateInput, Prisma.OrgUncheckedUpdateInput>
  /**
   * Choose, which Org to update.
   */
  where: Prisma.OrgWhereUniqueInput
}

/**
 * Org updateMany
 */
export type OrgUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Orgs.
   */
  data: Prisma.XOR<Prisma.OrgUpdateManyMutationInput, Prisma.OrgUncheckedUpdateManyInput>
  /**
   * Filter which Orgs to update
   */
  where?: Prisma.OrgWhereInput
  /**
   * Limit how many Orgs to update.
   */
  limit?: number
}

/**
 * Org updateManyAndReturn
 */
export type OrgUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Org
   */
  select?: Prisma.OrgSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Org
   */
  omit?: Prisma.OrgOmit<ExtArgs> | null
  /**
   * The data used to update Orgs.
   */
  data: Prisma.XOR<Prisma.OrgUpdateManyMutationInput, Prisma.OrgUncheckedUpdateManyInput>
  /**
   * Filter which Orgs to update
   */
  where?: Prisma.OrgWhereInput
  /**
   * Limit how many Orgs to update.
   */
  limit?: number
}

/**
 * Org upsert
 */
export type OrgUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Org
   */
  select?: Prisma.OrgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Org
   */
  omit?: Prisma.OrgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgInclude<ExtArgs> | null
  /**
   * The filter to search for the Org to update in case it exists.
   */
  where: Prisma.OrgWhereUniqueInput
  /**
   * In case the Org found by the `where` argument doesn't exist, create a new Org with this data.
   */
  create: Prisma.XOR<Prisma.OrgCreateInput, Prisma.OrgUncheckedCreateInput>
  /**
   * In case the Org was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OrgUpdateInput, Prisma.OrgUncheckedUpdateInput>
}

/**
 * Org delete
 */
export type OrgDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Org
   */
  select?: Prisma.OrgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Org
   */
  omit?: Prisma.OrgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgInclude<ExtArgs> | null
  /**
   * Filter which Org to delete.
   */
  where: Prisma.OrgWhereUniqueInput
}

/**
 * Org deleteMany
 */
export type OrgDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Orgs to delete
   */
  where?: Prisma.OrgWhereInput
  /**
   * Limit how many Orgs to delete.
   */
  limit?: number
}

/**
 * Org.pets
 */
export type Org$petsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pet
   */
  select?: Prisma.PetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pet
   */
  omit?: Prisma.PetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PetInclude<ExtArgs> | null
  where?: Prisma.PetWhereInput
  orderBy?: Prisma.PetOrderByWithRelationInput | Prisma.PetOrderByWithRelationInput[]
  cursor?: Prisma.PetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PetScalarFieldEnum | Prisma.PetScalarFieldEnum[]
}

/**
 * Org without action
 */
export type OrgDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Org
   */
  select?: Prisma.OrgSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Org
   */
  omit?: Prisma.OrgOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgInclude<ExtArgs> | null
}
